package cz.mg.resampler.gui.components.value;

import cz.mg.resampler.gui.utilities.ValueObservable;
import javax.swing.JSlider;
import javax.swing.event.ChangeListener;


public class FloatValueSlider extends javax.swing.JPanel implements ValueObservable {
    private static final int RESOLUTION = 100000;
    
    private float minValue = 0.0f;
    private float maxValue = 1.0f;
    private Orientation orientation = Orientation.HORIZONTAL;
    
    public FloatValueSlider() {
        initComponents();
        jSlider.setMinimum(0);
        jSlider.setMaximum(RESOLUTION);
        jSlider.setValue(0);
        jSlider.setOrientation(JSlider.HORIZONTAL);
        jSlider.setInheritsPopupMenu(true);
    }

    public float getMinValue() {
        return minValue;
    }

    public void setMinValue(float min) {
        float value = getValue();
        this.minValue = min;
        setValue(value);
    }

    public float getMaxValue() {
        return maxValue;
    }

    public void setMaxValue(float max) {
        float value = getValue();
        this.maxValue = max;
        setValue(value);
    }
    
    public float getValue(){
        if(minValue != maxValue){
            float relativeValue = (float)jSlider.getValue() / (float)RESOLUTION;
            return minValue * (1.0f - relativeValue) + maxValue * relativeValue;
        } else {
            return minValue;
        }
    }
    
    public void setValue(float value){
        if(minValue != maxValue){
            float relativeValue = (float)(value - minValue) / (float)(maxValue - minValue);
            jSlider.setValue((int) (relativeValue * RESOLUTION));
        } else {
            jSlider.setValue(0);
        }
    }

    public Orientation getOrientation() {
        return orientation;
    }

    public void setOrientation(Orientation orientation) {
        this.orientation = orientation;
        jSlider.setOrientation(orientation == Orientation.HORIZONTAL ? JSlider.HORIZONTAL : JSlider.VERTICAL);
    }
    
    @Override
    public void addChangeListener(ChangeListener listener){
        jSlider.addChangeListener(listener);
    }
    
    @Override
    public void removeChangeListener(ChangeListener listener){
        jSlider.removeChangeListener(listener);
    }
    
    public static enum Orientation {
        HORIZONTAL,
        VERTICAL
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider = new javax.swing.JSlider();

        setLayout(new java.awt.GridLayout(1, 0));
        add(jSlider);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider jSlider;
    // End of variables declaration//GEN-END:variables
}
