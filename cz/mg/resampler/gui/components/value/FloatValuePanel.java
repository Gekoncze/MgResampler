package cz.mg.resampler.gui.components.value;

import cz.mg.resampler.gui.utilities.NumberUtilities;
import cz.mg.resampler.gui.utilities.ValueObservable;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeListener;


public class FloatValuePanel extends javax.swing.JPanel implements ValueObservable {
    private float defaultValue;
    private float minValue;
    private float maxValue;
    private boolean updateLock = false;

    public FloatValuePanel() {
        initComponents();
        postInitComponents();
    }
    
    private void postInitComponents() {
        setComponentPopupMenu(jPopupMenu);
        floatValueSlider.setInheritsPopupMenu(true);
    }

    public float getDefaultValue() {
        return defaultValue;
    }

    public void setDefaultValue(float defaultValue) {
        this.defaultValue = defaultValue;
        updateBounds();
    }

    public float getMinValue() {
        return minValue;
    }

    public void setMinValue(float minValue) {
        this.minValue = minValue;
        updateBounds();
    }

    public float getMaxValue() {
        return maxValue;
    }

    public void setMaxValue(float maxValue) {
        this.maxValue = maxValue;
        updateBounds();
    }
    
    public float getValue(){
        return NumberUtilities.toFloat(jSpinner.getValue());
    }
    
    public void setValue(float value){
        jSpinner.setValue(value);
    }
    
    public String getTitle(){
        return jLabel.getText();
    }
    
    public void setTitle(String title){
        jLabel.setText(title);
    }
    
    private void updateSpinner(){
        if(updateLock) return;
        updateLock = true;
        jSpinner.setValue(floatValueSlider.getValue());
        updateLock = false;
    }
    
    private void updateSlider(){
        if(updateLock) return;
        updateLock = true;
        floatValueSlider.setValue(NumberUtilities.toFloat(jSpinner.getValue()));
        updateLock = false;
    }
    
    private void updateBounds(){
        try {
            floatValueSlider.setMinValue(minValue);
            floatValueSlider.setMaxValue(maxValue);
            floatValueSlider.setValue(defaultValue);
            jSpinner.setModel(new SpinnerNumberModel(defaultValue, minValue, maxValue, 1.0f));
        } catch(IllegalArgumentException e){
            // min, max and default value are set independently - may result in exception when not all are set yet
            // result should be correct though
        }
    }
    
    @Override
    public void addChangeListener(ChangeListener listener){
        jSpinner.addChangeListener(listener);
    }
    
    @Override
    public void removeChangeListener(ChangeListener listener){
        jSpinner.removeChangeListener(listener);
    }
    
    public void reset(){
        setValue(defaultValue);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu = new javax.swing.JPopupMenu();
        jMenuItemReset = new javax.swing.JMenuItem();
        floatValueSlider = new cz.mg.resampler.gui.components.value.FloatValueSlider();
        jPanel1 = new javax.swing.JPanel();
        jLabel = new javax.swing.JLabel();
        jPanelSpacer = new javax.swing.JPanel();
        jSpinner = new javax.swing.JSpinner();

        jMenuItemReset.setText("Reset");
        jMenuItemReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetActionPerformed(evt);
            }
        });
        jPopupMenu.add(jMenuItemReset);

        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWeights = new double[] {1.0};
        layout.rowWeights = new double[] {0.0, 0.0};
        setLayout(layout);

        floatValueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                floatValueSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        add(floatValueSlider, gridBagConstraints);

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWeights = new double[] {0.0, 1.0, 0.0};
        jPanel1.setLayout(jPanel1Layout);

        jLabel.setText("N/A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 2, 2);
        jPanel1.add(jLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanelSpacer, gridBagConstraints);

        jSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(1.0f)));
        jSpinner.setPreferredSize(new java.awt.Dimension(64, 20));
        jSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 2, 4);
        jPanel1.add(jSpinner, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void floatValueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_floatValueSliderStateChanged
        updateSpinner();
    }//GEN-LAST:event_floatValueSliderStateChanged

    private void jSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerStateChanged
        updateSlider();
    }//GEN-LAST:event_jSpinnerStateChanged

    private void jMenuItemResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetActionPerformed
        reset();
    }//GEN-LAST:event_jMenuItemResetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private cz.mg.resampler.gui.components.value.FloatValueSlider floatValueSlider;
    private javax.swing.JLabel jLabel;
    private javax.swing.JMenuItem jMenuItemReset;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelSpacer;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JSpinner jSpinner;
    // End of variables declaration//GEN-END:variables
}
