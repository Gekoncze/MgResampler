package cz.mg.resampler.gui.dialogs;

import cz.mg.resampler.gui.Configuration;
import cz.mg.resampler.gui.gallery.Gallery;
import cz.mg.resampler.gui.utilities.DrawingUtilities;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import javax.swing.BorderFactory;
import javax.swing.JPanel;


public class ImageGalleryDialog extends javax.swing.JDialog {
    private BufferedImage selectedImage = null;
    
    public static BufferedImage show(Frame parent){
        ImageGalleryDialog w = new ImageGalleryDialog(parent);
        w.setVisible(true);
        return w.selectedImage;
    }
    
    public static BufferedImage show(Dialog parent){
        ImageGalleryDialog w = new ImageGalleryDialog(parent);
        w.setVisible(true);
        return w.selectedImage;
    }
    
    private ImageGalleryDialog(Frame parent) {
        super(parent, true);
        initComponents();
        postInitComponent();
        postInitComponents();
        addListeners();
    }
    
    private ImageGalleryDialog(Dialog parent) {
        super(parent, true);
        initComponents();
        postInitComponent();
        postInitComponents();
        addListeners();
    }
    
    private void postInitComponent(){
        setSize(new Dimension(640,480));
        setLocationRelativeTo(null);
    }

    private void postInitComponents(){
        for(BufferedImage image : Gallery.IMAGES){
            jPanelGallery.add(new ImagePanel(image));
        }
    }
    
    private void addListeners(){
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                if(e.getKeyCode() == KeyEvent.VK_ESCAPE) dispose();
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelGallery = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Image gallery");
        java.awt.GridBagLayout layout1 = new java.awt.GridBagLayout();
        layout1.columnWeights = new double[] {1.0};
        layout1.rowWeights = new double[] {1.0};
        getContentPane().setLayout(layout1);

        jPanelGallery.setLayout(new java.awt.GridLayout(3, 3, 8, 8));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        getContentPane().add(jPanelGallery, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelGallery;
    // End of variables declaration//GEN-END:variables

    private class ImagePanel extends JPanel {
        private final BufferedImage image;

        public ImagePanel(final BufferedImage image) {
            this.image = image;
            setBorder(BorderFactory.createEtchedBorder());
            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if(e.getClickCount() >= 2){
                        selectedImage = image;
                        ImageGalleryDialog.this.dispose();
                    }
                }
            });
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            drawBackground(g);
            drawImage(g);
        }
        
        private void drawBackground(Graphics g){
            Configuration c = Configuration.getInstance();
            DrawingUtilities.drawChecker(
                    g,
                    this,
                    0,
                    0,
                    getWidth(),
                    getHeight(),
                    c.getBackgroundCheckerWidth(),
                    c.getBackgroundCheckerHeight(),
                    c.getBackgroundColorOuterFirst(),
                    c.getBackgroundColorOuterSecond()
            );
        }

        private void drawImage(Graphics g) {
            double panelRatio = (double)getWidth() / (double)getHeight();
            double imageRatio = (double)image.getWidth() / (double)image.getHeight();
            int iw = getWidth();
            int ih = getHeight();
            if(imageRatio > panelRatio){
                ih = (int) (iw / imageRatio);
            } else if(imageRatio < panelRatio) {
                iw = (int) (ih * imageRatio);
            }
            int ix = getWidth() / 2 - iw / 2;
            int iy = getHeight() / 2 - ih / 2;
            
            drawImageBackground(g, ix, iy, iw, ih);
            g.drawImage(image, ix, iy, iw, ih, null);
        }
        
        private void drawImageBackground(Graphics g, int ix, int iy, int iw, int ih){
            Configuration c = Configuration.getInstance();
            DrawingUtilities.drawChecker(
                    g,
                    this,
                    ix,
                    iy,
                    iw,
                    ih,
                    c.getBackgroundCheckerWidth(),
                    c.getBackgroundCheckerHeight(),
                    c.getBackgroundColorFirst(),
                    c.getBackgroundColorSecond()
            );
        }
    }
}
