package cz.mg.resampler.gui.dialogs;

import cz.mg.resampler.gui.utilities.ComponentUtilities;
import cz.mg.resampler.gui.Configuration;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.BorderFactory;
import javax.swing.JPanel;


public class ConfigurationDialog extends javax.swing.JDialog {
    private ColorChoiceButton bg1;
    private ColorChoiceButton bg2;
    private ColorChoiceButton obg1;
    private ColorChoiceButton obg2;
    
    private ConfigurationDialog(Frame parent) {
        super(parent, true);
        initComponents();
        postInitComponents();
        postInitComponent();
    }
    
    private ConfigurationDialog(Dialog parent) {
        super(parent, true);
        initComponents();
        postInitComponents();
        postInitComponent();
    }
    
    private void postInitComponent(){
        pack();
        setLocationRelativeTo(null);
        final KeyAdapter adapter = new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                if(e.getKeyCode() == KeyEvent.VK_ESCAPE) dispose();
            }
        };
        ComponentUtilities.forAll(getContentPane(), new ComponentUtilities.ComponentVisitAdapter() {
            @Override
            public void componentEntered(Component component) {
                component.addKeyListener(adapter);
            }
        });
    }
    
    private void postInitComponents(){
        jPanelBgColor1.add(bg1 = new Bg1ColorChoiceButton());
        jPanelBgColor2.add(bg2 = new Bg2ColorChoiceButton());
        jPanelOuterBgColor1.add(obg1 = new OuterBg1ColorChoiceButton());
        jPanelOuterBgColor2.add(obg2 = new OuterBg2ColorChoiceButton());
    }
    
    public static void show(Frame parent){
        ConfigurationDialog dialog = new ConfigurationDialog(parent);
        dialog.setVisible(true);
    }
    
    public static void show(Dialog parent){
        ConfigurationDialog dialog = new ConfigurationDialog(parent);
        dialog.setVisible(true);
    }
    
    private void repaintBoth(){
        repaint();
        getParent().repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabelBgColor1 = new javax.swing.JLabel();
        jLabelBgColor2 = new javax.swing.JLabel();
        jLabelOuterBgColor1 = new javax.swing.JLabel();
        jLabelOuterBgColor2 = new javax.swing.JLabel();
        jPanelBgColor1 = new javax.swing.JPanel();
        jPanelBgColor2 = new javax.swing.JPanel();
        jPanelOuterBgColor1 = new javax.swing.JPanel();
        jPanelOuterBgColor2 = new javax.swing.JPanel();
        jButtonResetBg1 = new javax.swing.JButton();
        jButtonResetBg2 = new javax.swing.JButton();
        jButtonResetOuterBg1 = new javax.swing.JButton();
        jButtonResetOuterBg2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Editor configuration");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabelBgColor1.setText("Background color 1");
        jLabelBgColor1.setToolTipText("Color displayed behind a transparent image.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 2, 2);
        getContentPane().add(jLabelBgColor1, gridBagConstraints);

        jLabelBgColor2.setText("Background color 2");
        jLabelBgColor2.setToolTipText("Color displayed behind a transparent image.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 2);
        getContentPane().add(jLabelBgColor2, gridBagConstraints);

        jLabelOuterBgColor1.setText("Outer background color 1");
        jLabelOuterBgColor1.setToolTipText("Color displayed around an image.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 2);
        getContentPane().add(jLabelOuterBgColor1, gridBagConstraints);

        jLabelOuterBgColor2.setText("Outer background color 2");
        jLabelOuterBgColor2.setToolTipText("Color displayed around an image.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 6, 6, 2);
        getContentPane().add(jLabelOuterBgColor2, gridBagConstraints);

        jPanelBgColor1.setPreferredSize(new java.awt.Dimension(48, 24));
        jPanelBgColor1.setLayout(new java.awt.GridLayout(1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 2, 4);
        getContentPane().add(jPanelBgColor1, gridBagConstraints);

        jPanelBgColor2.setPreferredSize(new java.awt.Dimension(48, 24));
        jPanelBgColor2.setLayout(new java.awt.GridLayout(1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        getContentPane().add(jPanelBgColor2, gridBagConstraints);

        jPanelOuterBgColor1.setPreferredSize(new java.awt.Dimension(48, 24));
        jPanelOuterBgColor1.setLayout(new java.awt.GridLayout(1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        getContentPane().add(jPanelOuterBgColor1, gridBagConstraints);

        jPanelOuterBgColor2.setPreferredSize(new java.awt.Dimension(48, 24));
        jPanelOuterBgColor2.setLayout(new java.awt.GridLayout(1, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 4, 4);
        getContentPane().add(jPanelOuterBgColor2, gridBagConstraints);

        jButtonResetBg1.setText("Reset");
        jButtonResetBg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetBg1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(6, 2, 0, 6);
        getContentPane().add(jButtonResetBg1, gridBagConstraints);

        jButtonResetBg2.setText("Reset");
        jButtonResetBg2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetBg2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 6);
        getContentPane().add(jButtonResetBg2, gridBagConstraints);

        jButtonResetOuterBg1.setText("Reset");
        jButtonResetOuterBg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetOuterBg1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 6);
        getContentPane().add(jButtonResetOuterBg1, gridBagConstraints);

        jButtonResetOuterBg2.setText("Reset");
        jButtonResetOuterBg2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetOuterBg2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 6, 6);
        getContentPane().add(jButtonResetOuterBg2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonResetBg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetBg1ActionPerformed
        bg1.setColor(Configuration.DEFAULT_BACKGROUND_COLOR_FIRST);
        repaintBoth();
    }//GEN-LAST:event_jButtonResetBg1ActionPerformed

    private void jButtonResetBg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetBg2ActionPerformed
        bg2.setColor(Configuration.DEFAULT_BACKGROUND_COLOR_SECOND);
        repaintBoth();
    }//GEN-LAST:event_jButtonResetBg2ActionPerformed

    private void jButtonResetOuterBg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetOuterBg1ActionPerformed
        obg1.setColor(Configuration.DEFAULT_BACKGROUND_COLOR_OUTER_FIRST);
        repaintBoth();
    }//GEN-LAST:event_jButtonResetOuterBg1ActionPerformed

    private void jButtonResetOuterBg2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetOuterBg2ActionPerformed
        obg2.setColor(Configuration.DEFAULT_BACKGROUND_COLOR_OUTER_SECOND);
        repaintBoth();
    }//GEN-LAST:event_jButtonResetOuterBg2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonResetBg1;
    private javax.swing.JButton jButtonResetBg2;
    private javax.swing.JButton jButtonResetOuterBg1;
    private javax.swing.JButton jButtonResetOuterBg2;
    private javax.swing.JLabel jLabelBgColor1;
    private javax.swing.JLabel jLabelBgColor2;
    private javax.swing.JLabel jLabelOuterBgColor1;
    private javax.swing.JLabel jLabelOuterBgColor2;
    private javax.swing.JPanel jPanelBgColor1;
    private javax.swing.JPanel jPanelBgColor2;
    private javax.swing.JPanel jPanelOuterBgColor1;
    private javax.swing.JPanel jPanelOuterBgColor2;
    // End of variables declaration//GEN-END:variables

    private abstract class ColorChoiceButton extends JPanel {
        public ColorChoiceButton() {
            setBorder(BorderFactory.createEtchedBorder());
            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    super.mouseClicked(e);
                    showDialog();
                }
            });
        }
        
        public void showDialog(){
            Color newColor = ColorChooserDialog.show(ConfigurationDialog.this, getColor());
            if(newColor != null) setColor(newColor);
            repaintBoth();
        }

        public abstract Color getColor();

        public abstract void setColor(Color color);
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.setColor(getColor());
            g.fillRect(0, 0, getWidth(), getHeight());
        }
    }
    
    private class Bg1ColorChoiceButton extends ColorChoiceButton {
        @Override
        public Color getColor() {
            return Configuration.getInstance().getBackgroundColorFirst();
        }

        @Override
        public void setColor(Color color) {
            Configuration.getInstance().setBackgroundColorFirst(color);
        }
    }
    
    private class Bg2ColorChoiceButton extends ColorChoiceButton {
        @Override
        public Color getColor() {
            return Configuration.getInstance().getBackgroundColorSecond();
        }

        @Override
        public void setColor(Color color) {
            Configuration.getInstance().setBackgroundColorSecond(color);
        }
    }
    
    private class OuterBg1ColorChoiceButton extends ColorChoiceButton {
        @Override
        public Color getColor() {
            return Configuration.getInstance().getBackgroundColorOuterFirst();
        }

        @Override
        public void setColor(Color color) {
            Configuration.getInstance().setBackgroundColorOuterFirst(color);
        }
    }
    
    private class OuterBg2ColorChoiceButton extends ColorChoiceButton {
        @Override
        public Color getColor() {
            return Configuration.getInstance().getBackgroundColorOuterSecond();
        }

        @Override
        public void setColor(Color color) {
            Configuration.getInstance().setBackgroundColorOuterSecond(color);
        }
    }
}
