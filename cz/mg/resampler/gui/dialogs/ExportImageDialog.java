package cz.mg.resampler.gui.dialogs;

import cz.mg.resampler.Image;
import cz.mg.resampler.StretchResampler;
import cz.mg.resampler.gui.components.export.ExportConfigurationPanel;
import cz.mg.resampler.gui.utilities.ErrorUtilities;
import cz.mg.resampler.gui.utilities.ImageState;
import cz.mg.resampler.resamplers.java.utilities.IntegerRegion;
import java.awt.Dialog;
import java.awt.Frame;


public class ExportImageDialog extends javax.swing.JDialog {
    private final StretchResampler stretchResampler;
    private final ImageState sourceImage;
    
    private ExportImageDialog(Frame parent, StretchResampler stretchResampler, ImageState sourceImage) {
        super(parent, true);
        this.stretchResampler = stretchResampler;
        this.sourceImage = sourceImage;
        initComponents();
        postInitComponent();
        postInitComponents();
    }
    
    private ExportImageDialog(Dialog parent, StretchResampler resampler, ImageState sourceImage) {
        super(parent, true);
        this.stretchResampler = resampler;
        this.sourceImage = sourceImage;
        initComponents();
        postInitComponent();
        postInitComponents();
    }
    
    private void postInitComponent(){
        pack();
        setLocationRelativeTo(null);
    }
    
    private void postInitComponents(){
        stretchExportConfigurationPanel.setSourceImageSize(sourceImage.getWidth(), sourceImage.getHeight());
        stretchExportConfigurationPanel.setDestinationImageSize(sourceImage.getWidth(), sourceImage.getHeight());
    }
    
    public static void show(Frame parent, StretchResampler resampler, ImageState sourceImage){
        ExportImageDialog dialog = new ExportImageDialog(parent, resampler, sourceImage);
        dialog.setVisible(true);
    }
    
    public static void show(Dialog parent, StretchResampler resampler, ImageState sourceImage){
        ExportImageDialog dialog = new ExportImageDialog(parent, resampler, sourceImage);
        dialog.setVisible(true);
    }
    
    private ExportConfigurationPanel getCurrentExportConfigurationPanel(){
        return (ExportConfigurationPanel)jTabbedPane.getSelectedComponent();
    }
    
    private void save(){
        try {
            ExportConfigurationPanel exportCfg = getCurrentExportConfigurationPanel();
            ImageState destinationImage = new ImageState(exportCfg.getDestinationImageWidth(), exportCfg.getDestinationImageHeight());
            if(Thread.interrupted()) throw new InterruptedException();
            IntegerRegion sr = exportCfg.getSourceRegion();
            IntegerRegion dr = exportCfg.getDestinationRegion();
            Image sourceResamplerImage = sr == null ? sourceImage.getResamplerImage(stretchResampler) : sourceImage.getResamplerImage(stretchResampler).subimage(sr.getX(), sr.getY(), sr.getWidth(), sr.getHeight());
            Image destinationResamplerImage = dr == null ? destinationImage.getResamplerImage(stretchResampler) : destinationImage.getResamplerImage(stretchResampler).subimage(dr.getX(), dr.getY(), dr.getWidth(), dr.getHeight());
            ExportProgressDialog.show(this, stretchResampler, sourceImage, destinationImage, sourceResamplerImage, destinationResamplerImage, fileChooserPanel.getFilePath(), fileChooserPanel.getFileFormat());
        } catch (Exception e) {
            ErrorDialog.show(this, "Could not save image", e);
            ErrorLogDialog.log(ErrorUtilities.generateLog(e));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelPadding = new javax.swing.JPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        stretchExportConfigurationPanel = new cz.mg.resampler.gui.components.export.StretchExportConfigurationPanel();
        stepExportConfigurationPanel = new cz.mg.resampler.gui.components.export.StepExportConfigurationPanel();
        fileChooserPanel = new cz.mg.resampler.gui.components.export.FileChooserPanel();
        jPanelConfirmation = new javax.swing.JPanel();
        jPanelDummy = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resample and save to file");
        setPreferredSize(new java.awt.Dimension(640, 480));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWeights = new double[] {1.0};
        layout.rowWeights = new double[] {1.0};
        getContentPane().setLayout(layout);

        java.awt.GridBagLayout jPanelPaddingLayout = new java.awt.GridBagLayout();
        jPanelPaddingLayout.columnWeights = new double[] {1.0};
        jPanelPaddingLayout.rowWeights = new double[] {1.0, 0.0, 0.0};
        jPanelPadding.setLayout(jPanelPaddingLayout);

        jTabbedPane.addTab("Stretch resampler", stretchExportConfigurationPanel);

        javax.swing.GroupLayout stepExportConfigurationPanelLayout = new javax.swing.GroupLayout(stepExportConfigurationPanel);
        stepExportConfigurationPanel.setLayout(stepExportConfigurationPanelLayout);
        stepExportConfigurationPanelLayout.setHorizontalGroup(
            stepExportConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 583, Short.MAX_VALUE)
        );
        stepExportConfigurationPanelLayout.setVerticalGroup(
            stepExportConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Step resampler", stepExportConfigurationPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 2, 4);
        jPanelPadding.add(jTabbedPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanelPadding.add(fileChooserPanel, gridBagConstraints);

        java.awt.GridBagLayout jPanelConfirmationLayout1 = new java.awt.GridBagLayout();
        jPanelConfirmationLayout1.columnWeights = new double[] {1.0, 0.0};
        jPanelConfirmationLayout1.rowWeights = new double[] {0.0};
        jPanelConfirmation.setLayout(jPanelConfirmationLayout1);

        jPanelDummy.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanelDummy.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout jPanelDummyLayout = new javax.swing.GroupLayout(jPanelDummy);
        jPanelDummy.setLayout(jPanelDummyLayout);
        jPanelDummyLayout.setHorizontalGroup(
            jPanelDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelDummyLayout.setVerticalGroup(
            jPanelDummyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanelConfirmation.add(jPanelDummy, gridBagConstraints);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanelConfirmation.add(jButtonSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 4, 4);
        jPanelPadding.add(jPanelConfirmation, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        getContentPane().add(jPanelPadding, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        save();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private cz.mg.resampler.gui.components.export.FileChooserPanel fileChooserPanel;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JPanel jPanelConfirmation;
    private javax.swing.JPanel jPanelDummy;
    private javax.swing.JPanel jPanelPadding;
    private javax.swing.JTabbedPane jTabbedPane;
    private cz.mg.resampler.gui.components.export.StepExportConfigurationPanel stepExportConfigurationPanel;
    private cz.mg.resampler.gui.components.export.StretchExportConfigurationPanel stretchExportConfigurationPanel;
    // End of variables declaration//GEN-END:variables
}
